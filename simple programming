#include <stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *next;
};
struct node *head;

void create(int);
void display();
int count();
void insertbegin(int);
void insertlast(int);
void insertmid(int,int);
void begindelete();
void lastdelete();

int main() {
    int n,x,item,d,loc;
    printf("enter no. of node");
    scanf("%d",&n);
    printf("\ncreate linked list");
    create(n);
    printf("\ndisplay list");
    display();
    x=count();
    printf("\n Total no. of nodes :- %d",x);
    printf("\ninsert the node data to be insert at begining");
    scanf("%d",&item);
    insertbegin(item);
    printf("\nnode inserted");
    printf("\ndisplay list");
    display();
    x=count();
    printf("\n now,Total no.of node:- %d",x);
    printf("\nintert the node data to be inserted at last");
    scanf("%d",&d);
    insertlast(d);
    printf("\nnode inserted");
    printf("\n display list");
    display();
    x=count();
    printf("\n now,Total no.of node:- %d",x);
    printf("\nenter the loc where node should be ins");
    scanf("%d",&loc);
    printf("\nenter the node data");
    scanf("%d",&item);
    insertmid(item,loc);
    printf("\nnode inserted");
    printf("\n display:-");
    display();
    x=count();
    printf("\n now,Total no.of node:- %d",x);
    printf("\ndelete the node from begining");
    begindelete();
    printf("\n node deleted:-view list");
    display();
    printf("\ndelete the node from end");
    lastdelete();
    printf("\n node deleted:-view list");
    display();
}

void create(int n)
{
    struct node *ptr,*fnnode;
    int item;
    ptr=(struct node*)malloc(sizeof(struct node));
    if(ptr==NULL)
    {
        printf("overflow");
    }
    else
    {
        printf("\nenter item to insert");
        scanf("%d",&item);
        ptr->data=item;
        ptr->next=NULL;
        head=ptr;
    
        // now creating n nodes
       for(int i=2;i<=n;i++)
      {
        fnnode=(struct node*)malloc(sizeof(struct node));
        if(fnnode==NULL)
        {
            printf("cant insert");
        }
        else
        {
            printf("\nenter the data for node:%d ",i);
            scanf("%d",&item);
            fnnode->data=item;
            fnnode->next=NULL;
            
            ptr->next=fnnode;
            ptr=ptr->next;
        }
       }
    }
}

void display()
{
    struct node *ptr;
    if(head==NULL)
    {
        printf("\nlist empty");
    }
    else
    {
        ptr=head;
        while(ptr!=NULL)
        {
            printf("\nData= %d",ptr->data);
            ptr=ptr->next;
        }
    }
}

int count()
{
    int count=0;
    struct node *ptr;
    if(head==NULL)
    {
        printf("\nlist empty");
    }
    else
    {
        ptr=head;
        while(ptr!=NULL)
        {
            count++;
            ptr=ptr->next;
        }
        return count;
    }
}

void insertbegin(int item)
{
    struct node *ptr;
    ptr=(struct node*)malloc(sizeof(struct node));
    if(ptr==NULL)
    {
        printf("\nlist is full");
    }
    else
    {
        ptr->data=item;
        ptr->next=head;
        head=ptr;
    }
}

void insertlast(int d)
{
    struct node *ptr,*temp;
     ptr=(struct node*)malloc(sizeof(struct node));
    if(ptr==NULL)
    {
        printf("\nlist is full");
    }
    else
    {
        if(head==NULL)
        {
            ptr->data=d;
            ptr->next=NULL;
            head=ptr;
        }
        else
        {
            temp=head;
            while(temp->next!=NULL)
            {
                temp=temp->next;
            }
            ptr->data=d;
            temp->next=ptr;
        
        }
    }
}

void insertmid(int item,int loc)
{
    struct node *ptr,*temp;
    ptr=(struct node*)malloc(sizeof(struct node));
    if(ptr==NULL)
    {
        printf("\nlist is full");
    }
    else
    {
        ptr->data=item;
        temp=head;
        for(int i=0;i<loc-1;i++)
        {
            temp=temp->next;
            if(temp==NULL)
            {
                printf("\ncant insert");
                return;
            }
        }
            ptr->next=temp->next;
            temp->next=ptr;
    }
}

void begindelete()
{
    struct node *ptr;
    if(head==NULL)
    {
        printf("list empty");
    }
    else
    {
        ptr=head;
        head=ptr->next;
        free(ptr);
    }
}
void lastdelete()
{
    struct node *ptr,*ptr1;
    if(head==NULL)
    {
        printf("list empty");
    }
    else if(head->next=NULL)
    {
        head=NULL;
        free(head);
    }
    else
    {
        ptr=head;
        while(ptr->next!=NULL)
        {
            ptr1=ptr;
            ptr=ptr->next;
        }
        ptr1->next=NULL;
        free(ptr);
    }
}

void search()
{
    int item,i=0,f;
    struct node *ptr;
    ptr=head;
    if(ptr==NULL)
    {
        printf("\n list empty");
    }
    else
    {
        printf("\ninsert item to be searched");
        scanf("%d",&item);
        while(ptr!=NULL)
        {
            if(ptr->data==item)
            {
                printf("\nItem found at position: %d",i+1);
            }
            else
            {
                f=1;
            }
            i++;
            ptr=ptr->next;
        }
        if(f==1)
        {
            printf("\n Item not found");
        }
    }
}

