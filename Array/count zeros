// Given an array of size N consisting of only 0's and 1's. The array is sorted in such a manner that all the 1's are placed first and then they are followed by all the 0's. 
Find the count of all the 0's.

// ONE IS VERY SIMPLE METHOD WHICH YOU ARE THING WRITE NOW WITH TRAVERSING  BUT ONE IS Littke bit different but reduces the code complexity..

// using Binary search

// URL OF BINARY SEARCH:    https://ide.geeksforgeeks.org/bXuRg6bs7F

// CODE:
#include <iostream>
using namespace std;

class solution {
  public:
    int countZeros(int arr[], int n) {
        if(arr[n-1] == 1) {
            return 0;
        }
        if(arr[0] == 0) {
            return 1;
        }
        
        int low=0, high=n-1, mid;
        while(low < high) {
            mid = (low+high)/2;
            
            if(arr[mid] == 0) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
        return n-high;
    }
};

int main() {
    int arr1[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0};
    int n = sizeof(arr1) / sizeof(arr1[0]);
    solution obj;
    auto ans = obj.countZeros(arr1, n);
    cout<<ans<<endl;
}
