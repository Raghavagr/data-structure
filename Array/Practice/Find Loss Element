//    Find lost element from a duplicated array |

Given two array which are duplicate of each other except the one element which is not in one of the 2 array.
And your job is to find that missing element from an array

EXAMPLE: 
    INPUT
      arr1[] = {1,3,5,7,9}
      arr2[] = {3,5,7,9}
      
    OUTPUT
      1
      
METHOD ~ 1 (SIMPLE APPROACH) -> Brute Force solution

  COMPLEXITY -> O(n*m)
  
 IMPLEMENTATION URL:  https://ide.geeksforgeeks.org/F3nYMilPEe
 

METHOD ~ 2 (EFFICIENT SOLUTION) -> BINARY SEARCH APPROACH

  COMPLEXITY -> O(log n)
  
IMPLEMENTATION URL: https://ide.geeksforgeeks.org/2vjY8q43QL

// CODE:
#include <iostream>
#include<algorithm>
using namespace std;

int findMissingUtil(int arr1[], int arr2[], int n) {
    if(n==1)
        return arr1[0];
    
    if(arr1[0] != arr2[0])
        return arr1[0];
        
    int low=0, high=n-1;
    while(low < high) {
        int mid = (low + high) / 2;
        
        if(arr1[mid] == arr2[mid])
            low = mid;
        else
            high = mid;
        
        if(low == high-1)
            break;
    }
    return arr1[high];
}

int findMissing(int arr1[], int arr2[], int m, int n) {
    // if arr1 is bigger then arr2
    if(n == m-1) {
        cout<<"Missing element is "<<findMissingUtil(arr1, arr2, m);
    }
    else if(m == n-1) {
        cout<<"Missing element is "<<findMissingUtil(arr2, arr2, n);
    }
    else {
        cout<<"Invalid Input"<<endl;
    }
}

    
int main() {
	int arr1[] = {2,3,4,5};
	int arr2[] = {2,3,4,5,6};
	int m = sizeof(arr1)/sizeof(arr1[0]);
	int n = sizeof(arr2)/sizeof(arr2[0]);
	findMissing(arr1, arr2, m, n);
	return 0;
}
