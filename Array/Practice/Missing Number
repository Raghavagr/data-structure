QUE) WAP TO FIND THE MISSING NUMBER IN A GIVEN ARRAY

There are 2 Methods to find the Missing Number:
METHOD-1
   Approach: The length of the array is n-1. So the sum of all n elements, i.e sum of numbers from 1 to n can be calculated using the formula n*(n+1)/2. 
   	     Now find the sum of all the elements in the array and subtract it from the sum of first n natural numbers, it will be the value of the missing element.
   Complexity Analysis: 
	Time Complexity: O(n). 
	  Only one traversal of the array is needed.
	Space Complexity: O(1). 
	  No extra space is needed

METHOD-2:
    Approach: The approach remains the same but there can be overflow if n is large.
              In order to avoid integer overflow, pick one number from known numbers and subtract one number from given numbers. 
	      This way there wonâ€™t have Integer Overflow ever.
	  
    Complexity will remain the same as above.
    
// IMPLEMENTATION:

// URL:	https://ide.geeksforgeeks.org/peV9nFN28f

# CODE

#include <iostream>
using namespace std;

// logic-1
// find the sum of n natural number : n*(n+1)/2.
// and take sum of al number, subtract from it.
int findMissing(int arr[], int n) {
    int total, sum=0;
    total = ((n+1)*(n+2)) / 2;  // n+1 because length of array is n-1
    
    for(int i=0; i<n; i++) {
        total = total - arr[i];
        //sum = sum+arr[i];
    }
    
    //return total-sum;
    return total;
    
}

// logic-2
int getMissing(int arr[], int n) {
    int total=1;
    for(int i=2; i<=n+1; i++) {
        total += i;
        total = total - arr[i-2];
    }
    return total;
}

int main() {
	//int arr[] = {1,2,4,5,6};
	int arr[] = {1, 2, 4, 6, 3, 7, 8};
	int n = sizeof(arr)/sizeof(arr[0]);
	
    cout<<"missing no using logic-1: "<<findMissing(arr,n);
    cout<<"\nmissing no using logic-2: "<<getMissing(arr,n);
    
	return 0;
}




