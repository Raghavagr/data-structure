// Find the Longest Sum Contiguous Sub-Array in Array.
  -> This is Known as Kadane's Algorithm
  -> This question arises when there is negative elements mix with Positive elements in Array
  
  -> when we approach this problem, first only try to find the maximum ssum of sub-array, then see the concept of finding the index 
      so, It will be very easy to understand the complete Algorithm and its working.
      
In this max_so_far is int element which will store the max sum.
        max_end_here is the element where the sub-array end.
     main concept is to understand about this 2 variables only.
     
     And s will point to end of array or sub-array
     start is start index
     end is end index.
 
 Remember, as we got the max_so_far fr the first time under loop, this is start of our sub-array and start index will start from here only,
     before all indexes are of no use,     
 
 Dry-Run the code.
 
 // IMPLEMENTATION
 
 // URL: https://ide.geeksforgeeks.org/D8nkOwacJf      (Run The code from here to understand from editor)

// CODE
#include <iostream>
using namespace std;

int main() {
	int arr[] = {4,-3,-2,2,3,1,-2,-3,4,2,-6,-3,-1,3,1,2};
	int n = sizeof(arr) / sizeof(arr[0]);
	int max_so_far, max_end_here;  // max_end_here for end index and max_so_far for max sum
	int s=0, start=0, end=0;       // for storing starting and ending index
	max_so_far=arr[0];
	max_end_here = 0;
	
	// find the max sum of sub-array
	for(int i=0; i<n; i++) {
	    max_end_here = max_end_here + arr[i];
	    
	    if(max_so_far < max_end_here) {
	        max_so_far = max_end_here;
	        start = s;
	        end = i;
	    }
	    
	    if(max_end_here < 0) {
	        max_end_here = 0;
	        s = s + i;
	    }
	}
	
	cout<<"maximum sum of longest sub-array is: "<<max_so_far<<endl;
	cout<<"the index start and end for this sub-array is: "<<start<<" to "<<end;
	
	return 0;
}

 
 
