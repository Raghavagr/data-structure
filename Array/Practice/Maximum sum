Maximum sum such that no two elements are adjacent

Example:

  arr[] = {5,  5, 10, 40, 50, 35}

  incl = 5 
  excl = 0

  For i = 1 (current element is 5)
  incl =  (excl + arr[i])  = 5
  excl =  max(5, 0) = 5

  For i = 2 (current element is 10)
  incl =  (excl + arr[i]) = 15
  excl =  max(5, 5) = 5

  For i = 3 (current element is 40)
  incl = (excl + arr[i]) = 45
  excl = max(5, 15) = 15

  For i = 4 (current element is 50)
  incl = (excl + arr[i]) = 65
  excl =  max(45, 15) = 45

  For i = 5 (current element is 35)
  incl =  (excl + arr[i]) = 80
  excl =  max(65, 45) = 65

And 35 is the last element. So, answer is max(incl, excl) = 

IMPLEMENTATION

// URL: https://ide.geeksforgeeks.org/Ricf6Avi8o

// code:
#include <iostream>
using namespace std;

int findMaxSum(int arr[], int n) {
    int incl = arr[0];
    int excl = 0;
    int excl_new = 0;
    int i;
    
    for(int i=0; i<n; i++) {
        excl_new = (incl > excl) ? incl : excl;
        
        incl = excl + arr[i];
        excl = excl_new;
    }
    
    cout<<((incl > excl_new) ? incl : excl);
}

int main() {
	int arr[] = {5, 5, 10, 100, 10, 5};
	int n = sizeof(arr) / sizeof(arr[0]);
	findMaxSum(arr, n);
	return 0;
}
