// Count triplets with sum smaller than a given value

// METHOD - 1(SIMPLE APPROACH)

-> Run 3 loops and check for each permutation and combination
-> complexity = O(n^3)

// URL: https://ide.geeksforgeeks.org/lZk4txEad9


// METHOD-2 (Efficient Solution)  use sorting

  - first sort an array in ascending order
  - initialize result variable as 0
  - Run a loop from i=0 to n-2. an iteration of this loop triplets arr[i] as first element
      - initialize other 2 element as corner element. j = i+1 AND K = n-1
      - Move j and k toward each other until they meet, i.e., while (j = sum), then do k--
      // Else for current i and j, there can (k-j) possible third elements
            // that satisfy the constraint.
            (ii) Else Do ans += (k - j) followed by j++ 
            
       
// IMPLEMENTATION URL:  https://ide.geeksforgeeks.org/WynzjRcgy4

// CODE:

#include <iostream>
#include<algorithm>
using namespace std;

int countTriplet(int arr[], int n, int sum) {
    int cnt=0;
    
    // sort the array 
    sort(arr, arr+n);
    
    for(int i=0; i<n; i++) {
        int j=i+1, k=n-1;
        
        while(j < k) {
            // If sum of current triplet is more or equal,
            // move right corner to look for smaller values
            if(arr[i] + arr[j] + arr[k] >= sum) {
                k--;
            }
            else {
                cnt += (k-j);
                j++;
            }
        }
        
    }
    return cnt;
}

int main() {
	int arr[] = {5,1,3,4,7};
	int n = sizeof(arr) / sizeof(arr[0]);
	int sum=12;
	cout<<countTriplet(arr, n, sum);
	return 0;
}
