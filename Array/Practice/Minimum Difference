QUE) Find minimum difference between any two elements IN array

METHOD -1 (NAIVE APPROACH)  COMPLEXITY = O(N^2)

Take 2 loops(Brute Force) and check every permutation and comb difference and what is minimum diff print it out.

IMPLEMENTATION URL: https://ide.geeksforgeeks.org/iRFgcHBaoz

// METHOD - 2 (SORTING)   COMPLEXITY = O(n log n)

 - sort array in ascending order (O N LOG N)
 - Initialize difference as infinite. The step takes O(1).
 - Compare all the adjacent pairs in sorted array and keep track of minimum difference. The step takes O(n) time.
 
 IMPLEMENTATION URL:  https://ide.geeksforgeeks.org/pV8vXw99T0
 
 // CODE: 
 
 #include <iostream>
#include<algorithm>
using namespace std;

int findMinDiff(int arr[], int n) {
    //sort arr in asc order
    sort(arr, arr+n);
    int diff = arr[0];
    
    //find min diff by comparing adjacent pairs in sorted array 
    for(int i=0; i<n-1; i++) {
        if(arr[i+1] - arr[i] < diff) {
            diff = arr[i+1] - arr[i];
        }
    }
    cout<<"Minimum diff is: "<<diff;
}

int main() {
	int arr[] = {30,5,20,9};
	int n = sizeof(arr)/sizeof(arr[0]);
	findMinDiff(arr, n);
	return 0;
}
