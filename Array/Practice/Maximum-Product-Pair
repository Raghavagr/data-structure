//  Find a pair with maximum product in array of Integers 

// METHOD -1 (SIMPLE SOLUTION)

Simply use 2 loops and find each and every combination for the product
 -> Complexity = O(N^2)
 
 // IMPLEMENTATION URL: https://ide.geeksforgeeks.org/c512hIHQ4a
 
 
 // METHOD-2 (SORTING)
 
 1) Sort the array in ascending order
 2) If all the elements are positive, simply return the product of last 2 elements
 3) If there are -ve values also in array, then return the maximum of product of first two elements and last 2 elements
 
 Complexity = O(n log N)
 
 // METHOD -3 (Effective Solution)
 
COMPLEXITY = O(n)

An Efficient Solution can solve the above problem in a single traversal of the input array. 
The idea is to traverse the input array and keep track of the following four values. 
a) Maximum positive value 
b) Second maximum positive value 
c) Maximum negative value i.e., a negative value with maximum absolute value 
d) Second maximum negative value. 
At the end of the loop, compare the products of the first two and last two and print the maximum of two products. 

Below is the implementation of this idea. 

// IMPLEMENATION URL: https://ide.geeksforgeeks.org/mBc9aUKaUa


// CODE:
#include <iostream>
using namespace std;

int MaximumProduct(int arr[], int n) {
    int posa=1,posb=1,nega=1,negb=1;
    for(int i=0; i<n; i++) {
        if(arr[i] > posa) {
            posb = posa;
            posa = arr[i];
        }
        else if(arr[i] > posb) {
            posb = arr[i];
        }
        
        //update min and second min if required
        if(arr[i] < 0 && abs(arr[i]) > abs(nega)) {
            negb = nega;
            nega = arr[i];
        }
        else if(arr[i] < 0 && abs(arr[i]) > abs(negb)) {
            negb = arr[i];
        }
    }
    if(nega * negb > posa * posb) {
        cout<<"pair gives max product is "<<nega<<" & "<<negb<<endl;
    }
    else {
        cout<<"pair gives max product is "<<posa<<" & "<<posb<<endl;
    }
}

int main() {
	int arr[20] = {1,4,3,6,7,0};
    int n = sizeof(arr) / sizeof(arr[0]);
    MaximumProduct(arr, n);
    
	return 0;
}
