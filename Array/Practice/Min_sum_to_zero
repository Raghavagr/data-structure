C/C++ Program for Two elements whose sum is closest to zero

// URL: https://ide.geeksforgeeks.org/wQ3RKpa3nt

#include <iostream>
using namespace std;

int min_sum(int arr[], int n) {
    int min_sum, sum, l, r;
    min_sum = arr[0] + arr[1];
    for(int i=0; i<n; i++) {
        for(int j=i+1; j<n; j++) {
            sum = arr[i] + arr[j];
            if(abs(min_sum) > abs(sum)) {
                min_sum = sum;
                l = i;
                r = j;
            }
        }
    }
    cout<<"two elements whose sum is min: "<<arr[l]<<" & "<<arr[r];
}

int main() {
	int arr[] = {1, 60, -10, 70, -80, 85};
	int n = sizeof(arr) / sizeof(arr[0]);
	min_sum(arr, n);
	return 0;
}


// METHOD-2 (SORTING)
	COMPLEXITY = O(n log n)

URL:	https://ide.geeksforgeeks.org/o1Ad0xDwRK

STEPS:
 1) Sort all the elements of input array
 2) use 2 index variables to traverse from both side left and right
 	initialize l=0 & r=n-1
3)sum = arr[l] + arr[r]
4) if sum -ve then l++
5) if sum +ve then r--
6) Keep track of abs min sum. 
7) Repeat steps 3, 4, 5 and 6 while l < r

// code:
#include <iostream>
#include<algorithm>

using namespace std;

int min_sum(int arr[], int n) {
    int min_sum, sum, l, r, min_l, min_r;
    min_sum = arr[0] + arr[1];
    l=0;
    r = n-1;
    min_l = l; min_r = r;
    // sort the array 
    sort(arr, arr+n);
    
    while(l < r) {
        sum = arr[l] + arr[r];
        
        /*if abs of sum is less then update the result items*/
        if(abs(sum) < abs(min_sum)) {
            min_sum = sum;
            min_l = l;
            min_r = r;
        }
        if(sum < 0)
            l++;
        else
            r--;
    }
    
    cout<<"two elements whose sum is min: "<<arr[min_l]<<" & "<<arr[min_r];
}

int main() {
	int arr[] = {1, 60, -10, 70, -80, 85};
	int n = sizeof(arr) / sizeof(arr[0]);
	min_sum(arr, n);
	return 0;
}
