// Menu-Driven Program for Singly Linked List

// URL - https://ide.geeksforgeeks.org/x4Ntk5AliZ

//code
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next; //next ptr ref
};
//struct Node *head;
/*
struct Node *createList(int n) {
    struct Node *ptr, *fnnode;
    int item;
    ptr = (struct Node *)malloc(sizeof(struct Node));
    if(ptr == NULL) {
        printf("Overflow");
    }
    else {
        printf("enter the data of 1st node\n");
        scanf("%d", &n);
        ptr->data = item;
        ptr->next = NULL;
        head = ptr;
        
        //now create n nodes
        for(int i=2; i<=n; i++) {
            fnnode = (struct Node *)malloc(sizeof(struct Node));
            if(fnnode == NULL) {
                printf("cannot insert\n");
            }
            else {
                printf("\nenter data for %d node", i);
                scanf("%d", &item);
                fnnode->data = item;
                fnnode->next = NULL;
                
                ptr->next = fnnode;
                ptr = ptr->next;
            }
        }
    }
}
*/

void traverseList(struct Node *head) {
    struct Node *ptr = head;
    if(ptr == NULL) {
        printf("\nList Empty\n");
    }
    else {
        printf("\nprinting list elements\n");
        while(ptr != NULL) {
            printf("%d ", ptr->data);
            ptr = ptr->next;
        }
    }
}

// ** Insertion Operation ** \\
//Case-1
struct Node *insertAtBegin(struct Node *head, int item) {
    struct Node *ptr = (struct Node *)malloc(sizeof(struct Node));
    ptr->data = item;
    ptr->next = head;
    head = ptr;
    return head;
}

//case-2
struct Node *insertAtEnd(struct Node *head, int item) {
    struct Node *ptr = (struct Node *)malloc(sizeof(struct Node));
    struct Node *temp = head;
    
    while(temp->next != NULL) {
        temp = temp->next;
    }
    
    temp->next = ptr;
    ptr->data = item;
    ptr->next = NULL;
    return head;
}

struct Node *insertAtRandom(struct Node *head, int item, int index) {
    struct Node *ptr = (struct Node *)malloc(sizeof(struct Node));
    struct Node *temp = head;
    int i=0;
    
    while(i != index-1) {
        i++;
        temp = temp->next;
    }
    
    ptr->data = item;
    ptr->next = temp->next;
    temp->next = ptr;
    
    return head;
    
}

//  /* delete Operations */
struct Node *deleteAtBegin(struct Node *head) {
    struct Node *ptr = head;
    if(ptr == NULL) {
        printf("\nList empty");
    }
    else {
        head = head->next;
        free(ptr);
        printf("\nNode deleted successfully");
    }
    return head;
}

struct Node *deleteAtLast(struct Node *head) {
    struct Node *ptr = head;
    struct Node *temp = head->next;
    if(ptr == NULL) {
        printf("\nList empty");
    }
    else {
        while(temp->next != NULL) {
            temp = temp->next;
            ptr = ptr->next;
        }
        ptr->next = NULL;
        free(temp);
    }
    return head;
}

struct Node *deleteAtRandom(struct Node *head, int index) {
    struct Node *ptr = head;
    struct Node *temp = head->next;
    int i=0;
    while(i != index-1) {
        ptr = ptr->next;
        temp = temp->next;
        i++;
    }
    
    ptr->next = temp->next;
    free(temp);
    
    return head;
}

int main() {
	struct Node *head;
	//head = (struct Node *)malloc(sizeof(struct Node));
	head = insertAtBegin(head, 10);
	head = insertAtEnd(head, 50);
	head = insertAtRandom(head, 20, 1);
	traverseList(head);
	head = deleteAtRandom(head, 1);
	traverseList(head);
	return 0;
}
