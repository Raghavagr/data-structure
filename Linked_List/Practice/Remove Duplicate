// Remove duplicate element from sorted Linked List

1st) SORTED LINKED LIST: // URL: https://ide.geeksforgeeks.org/cXI4Hlyp98

//code
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

void insertElement(struct Node** head, int item) {
    struct Node *ptr = (struct Node *)malloc(sizeof(struct Node));
    ptr->data = item;
    ptr->next = (*head);
    (*head) = ptr;
}

int deleteDuplicate(struct Node *head) {
    struct Node *current = head;
    //struct Node *temp = head->next;
    struct Node *next_next;
    
    if(current == NULL) {
        return -1;
    }
    
    while(current->next != NULL) {
        if(current->data == current->next->data) {
            next_next = current->next->next;
            free(current->next);
            current->next = next_next;
        }
        else {
            current = current->next;
            //temp = temp->next;
        }
    }
}

void display(struct Node *head) {
    struct Node *temp = head;
    while(temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
}

int main() {
    struct Node *head = NULL;
    //struct Node *ptr = head;
    insertElement(&head, 1);
    insertElement(&head, 2);
    insertElement(&head, 2);
    insertElement(&head, 3);
    insertElement(&head, 4);
    insertElement(&head, 5);
    insertElement(&head, 5);
    //insertElement(&head, 60);
    printf("list before removing duplicate: \n");
    display(head);
    
    deleteDuplicate(head);
    printf("\nlist after removing duplicate: \n");
    display(head);
	return 0;
}


// QUE-2 ) NOW, DELETE DUPLICATE FROM AN UNSORTED LINKED LIST:

// URL:  https://ide.geeksforgeeks.org/9UVYkQaVoO

int deleteDuplicate(struct Node *temp) {
    struct Node *ptr1, *ptr2, *duplicate;
    ptr1 = temp;
     
    while(ptr1 != NULL && ptr1->next != NULL) {
        ptr2 = ptr1;
        
        while(ptr2->next != NULL) {
            if(ptr1->data == ptr2->next->data) {
                duplicate = ptr2->next;
                ptr2->next = ptr2->next->next;
                free(duplicate);
            }
            else {
                ptr2 = ptr2->next;
             }
        }
        ptr1 = ptr1->next;
    }
}
