// QUE) Print the Middle Element of Linked List

// URL: https://ide.geeksforgeeks.org/y2sLbVCqmM
// URL2 OF SAME PROGRAM:	https://ide.geeksforgeeks.org/CysxUgXTRC

// If we have the odd number of nodes, eg-5 then it will give the correct middle element as 3.
But when We have the even number of nodes, then it will print the next even as in 6 nodes it will print the 4th node 
 - because there is no specfic middle in even.

// If you want that it should print the one early the, one slight change is there, shown at end of program.

//code
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

void printMiddle(struct Node *head) {
    struct Node *fptr2 = head;
    struct Node *sptr1 = head;
    
    if(head != NULL) {
        //the only logic is to traverse the linked list with two pointers
        //one at normal speed and other twice the speed of first
        //when the fast pointer reaches to the end, slow pointer will be in 
        //the middle of the linted list
        while(fptr2 != NULL && fptr2->next != NULL) {
            fptr2 = fptr2->next->next;
            sptr1 = sptr1->next;
        }
        printf("Middle element is: %d", sptr1->data);
    }
}

void Push(struct Node **head_ref, int item) {
    struct Node *ptr = (struct Node *)malloc(sizeof(struct Node));
    
    ptr->data = item;
    ptr->next = (*head_ref);
    (*head_ref) = ptr;
}


int main() {
    struct Node *head = NULL;
    Push(&head, 10);
    Push(&head, 20);
    Push(&head, 30);
    Push(&head, 40);
    Push(&head, 50);
    //Push(&head, 60);
    printMiddle(head);
	return 0;
}


// If you want that in even number of nodes, it should print one node before then, slight one change you have to do in above program

// start slow ptr as head
// start fast ptr from head->next

slowptr = head;
fastptr = head->next;

// remaining prog is as it is...



// APPROACH - 2

-> calculate the length of linked list
 - find the mid as length/2 + 1
 - and follow the simple approach to print the node at given index and print the data at mid node.
 
 // IMPLEMENTATION
 /* Should return data of middle node. If linked list is empty, then  -1*/
int getMiddle(Node *head)
{
   // Your code here
   int count = 0;
   struct Node *ptr = head;
   while(ptr != NULL) {
       count++;
       ptr = ptr->next;
   }
   
   int mid = (count/2) + 1;
   
   // simple approach to print nth node
   int cnt=1;
   while(head != NULL) {
       if(cnt == mid) {
           return head->data;
       }
       cnt++;
       head = head->next;
   }
   
}
