// Merge two sorted linked lists such that merged list is in reverse order

Given two linked lists sorted in increasing order. Merge them such a way that the result list is in decreasing order (reverse order).

Examples:
  Input:  a: 5->10->15->40
          b: 2->3->20 
  Output: res: 40->20->15->10->5->3->2


APPROACH
The idea is to follow merge style process. Initialize result list as empty. Traverse both lists from beginning to end. 
Compare current nodes of both lists and insert smaller of two at the beginning of the result list.

ALGORITHM
1) Initialize result list as empty: res = NULL.
2) Let 'a' and 'b' be heads first and second lists respectively.
3) While (a != NULL and b != NULL)
    a) Find the smaller of two (Current 'a' and 'b')
    b) Insert the smaller value node at the front of result.
    c) Move ahead in the list of smaller node. 
4) If 'b' becomes NULL before 'a', insert all nodes of 'a' 
   into result list at the beginning.
5) If 'a' becomes NULL before 'b', insert all nodes of 'a' 
   into result list at the beginning. 
   
// IMPLEMENTATION
struct Node * mergeResult(Node *node1,Node *node2)
{
    // your code goes here
    Node *res = NULL;
    if(node1 == NULL && node2 == NULL) {
        return NULL;
    }
    
    // traverse both the list till end
    while(node1 != NULL && node2 != NULL) {
        if(node1->data <= node2->data) {
            Node *temp = node1->next;
            
            //point it to first of result;
            node1->next = res;
            res = node1;
            
            node1 = temp;
        }
        else {
            Node *temp = node2->next;
            node2->next = res;
            res = node2;
            node2 = temp;
        }
    }
    
    while(node1 != NULL) {
        Node *temp = node1->next;
        node1->next = res;
        res = node1;
        node1 = temp;
    }
    
    while(node2 != NULL) {
        Node *temp = node2->next;
        node2->next = res;
        res = node2;
        node2 = temp;
    }
    
    return res;
}
