// Swap nodes in a linked list without swapping data 

// IMPLEMENTATION

#include <iostream>
using namespace std;

void SwapNodes(struct Node *head, int x, int y) {
    //nothing to do if x and y are same
    if(x==y)
        return
    
    // Search for x (keep track of prevX and CurrX
    struct Node *prevX = NULL;
    struct Node *CurrX = head;
    while(CurrX != NULL && CurrX->data != x) {
        prevX = CurrX;
        CurrX = CurrX->next;
    }
    
    // Search for y (keep track of prevY and CurrY
    struct Node *prevY = NULL, *currY = *head_ref;
    while (currY && currY->data != y) {
        prevY = currY;
        currY = currY->next;
    }
    
    // If either x or y is not present, nothing to do
    if (currX == NULL || currY == NULL)
        return;
    
    // if x is not head of list
    if(prevX != NULL) {
        prevX->next = currY;
    }
    else { // Else make y as new head
        head = currY
    }
    // If y is not head of linked list
    if (prevY != NULL)
        prevY->next = currX;
    else // Else make x as new head
        head = currX;
        
    // Swap next pointers
    struct Node* temp = currY->next;
    currY->next = currX->next;
    currX->next = temp
}

int main() 
	cout<<"GfG!";
	return 0;
}
