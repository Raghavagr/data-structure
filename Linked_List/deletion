// URL: https://ide.geeksforgeeks.org/b0Oy12rje0

//code
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};
//struct Node *head;

void linkedListTraversal(struct Node *ptr) {
    while(ptr != NULL) {
        printf("Element: %d\n",ptr->data);
        ptr= ptr->next;
    }
}

// case-1 Deleting a Node from begining
struct Node *deleteBegin(struct Node *head) {
    struct Node *ptr = head; 
    head = head->next;
    free(ptr);
    
    return head;
}

//case-2: Deleting a Node at a given index(random)
struct Node *deleteBetween(struct Node *head,int index) {
    struct Node *p = head;
    struct Node *q = head->next;
    for(int i=0; i<index-1; i++) {
        p = p->next;
        q = q->next;
    }
    p->next = q->next;
    free(q);
    
    return head;
}

// case-3 Deleting a node at end
struct Node *deleteEnd(struct Node *head) {
    struct Node *p = head;
    struct Node *q = head->next;
    while(q->next != NULL) {
        p = p->next;
        q = q->next;
    }
    
    p->next = NULL;
    free(q);
    
    return head;
}

// Case 4: Deleting the element with a given value from the linked list
struct Node *deleteAtIndex(struct Node *head, int value) {
    struct Node *p = head;
    struct Node *q = head->next;
    
    while(q->data != value && q->next!= NULL) {
        p = p->next;
        q = q->next;
    }
    
    p->next = q->next;
    free(q);
    
    return head;
}


int main() {
	struct Node *head;
    struct Node *second;
    struct Node *third;
    struct Node *fourth;

    // Allocate memory for nodes in the linked list in Heap
    head = (struct Node *)malloc(sizeof(struct Node));
    second = (struct Node *)malloc(sizeof(struct Node));
    third = (struct Node *)malloc(sizeof(struct Node));
    fourth = (struct Node *)malloc(sizeof(struct Node));

    // Link first and second nodes
    head->data = 7;
    head->next = second;

    // Link second and third nodes
    second->data = 11;
    second->next = third;

    // Link third and fourth nodes
    third->data = 41;
    third->next = fourth;

    // Terminate the list at the third node
    fourth->data = 66;
    fourth->next = NULL;

    printf("Linked list before deletion\n");
    linkedListTraversal(head);
    
    /*
    head = deleteBegin(head);
    
    printf("\nLinked list after deletion\n");
    linkedListTraversal(head);
    */
    
    // deletion at index(random)
    head = deleteBetween(head,2);
    printf("\nLinked list after deletion\n");
    linkedListTraversal(head);
    
	return 0;
}
