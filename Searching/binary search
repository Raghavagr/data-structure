Binary Search := binary search is a very efficient technique of search which only work with sorted list.
               - It does not work with unsorted array.
               
       - It follows the divide-conquer approach for searching.
         - in which it divides the array in 2 half and search the element from mid position
         - first compares with mid -> if found return the mid position
         - else check whether less or greater then mid : - if less then mid then again search in left side of array
                                                         - if greater then mid then searches in right side of array.
                                                         
                                                         
   Implimentation of Binary search using recursuion
   
   
#include <stdio.h>
int binarySearch(int [],int,int,int);

int main() {
    int a[20];
    int n,se,loc=-1;
    printf("enter the no. of elements");
    scanf("%d",&n);
    printf("enter the elements");
    for(int i=0;i<n;i++) {
        scanf("%d",&a[i]);
    }
    printf("your array is");
    for(int i=0;i<n;i++) {
        printf("%d\n",a[i]);
    }
    
    printf("\nenter the search element");
    scanf("%d",&se);
        loc = binarySearch(a,0,n-1,se);
        if(loc != -1) {
            printf("\nelement found at %d",loc);
        }
        else {
            printf("element not found");
        }
    
}

int binarySearch(int a[],int beg,int end,int se) {
    int mid;
    if(beg<=end) {
        mid = (beg + end)/2;
        
        if(a[mid] == se) {
            return mid+1;
        }
        else if(a[mid] > se) {
            return binarySearch(a,beg,mid-1,se);
        }
        else {
            return binarySearch(a,mid+1,end,se);
        }
    }
}
