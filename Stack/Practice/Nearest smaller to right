/*    Nearest smaller to right   

STEPS:    1) Start iteration from right (Right to left)
          2) check for small value
          3) Print vector in revrse order for answer(Vector Reverse)
          
EXAMPLE:  Supoose array is: 4 | 5 | 2 | 10 | 8

FIRST, i at 8, no element at right, push -1 in vector, and 8 to stack
    stack= 8,  vactor = -1
    
SECOND, i at 10, 8 at right and smaller, then
    Stack = 10, 8 vector = -1, 8

->  PUSH IN STACK ALWAYS HAPEN AT TOP, SO 10 AT UPPER TO 8....

THIRD: SAME PROCESS, Stack= 2, 10, 8   vector = -1, 8, -1

FOURTH: STACK- 5, 2, 10, 8    VECTOR = -1, 8, -1, 2

FIFTH = STACK- 4, 5, 2, 10, 8    VECTOR = -1, 8, -1, 2, 2

VECTOR IN REVERSE ORDER = 2, 2, -1, 8, -1 (ANSWER)


// IMPLEMENTATION

#include <iostream>
using namespace std;

int left_smaller(int arr[], int size) {
    vector<int> v;
    stack<int> s;
    
    for(int i=size-1; i>=0; i--) {
        if(s.size() == 0) {
            v.push_back(-1);
        }
        
        else if(s.size() > 0 && s.top() < arr[i]) {
            v.push_back(s.top());
        }
        
        else if(s.size() > 0 && s.top() >= arr[i]) {
            while(s.size() > 0 && s.top() >= arr[i]) {
                s.pop();
            }
            if(s.size() == 0) {
                v.push_back(-1);
            }
            else {
                v.push_back(s.top());
            }
        }
        s.push_back(arr[i]);
    }
    // print vector in REVERSE ORDER.
}

int main() {
	
	return 0;
}

