Maximum Area Histogram Problem:
Problem Statement:  You are given a array, which is basically known as heights of building. width is same. 
              Now you have to determine the maximum area of this histogram of this building that can be spread in left and right.
              
DESCRIPTION:  So suppose we have array as 6 | 2| 5 | 4 | 5 | 1 | 6

    Now, where where I can spread this in left and right, 
    1) from 2, i can spread this histogram from 6 to 5. then we get 1 so we cannot move ahead,
          so, AREA = 2 * 5 = 10
    2) from 1, I can spead to all the array,
          so, AREA = 1 * 7 = 7
    3) From 4 I can spread to left and right 5.
          so, AREA = 4 * 3 = 12
          
 SO, maximum area of the histogram is 12.
 
 // APPROACH TO SOLVE THE PROBLEM
 Wherever we get the small number to the current histogram we stop, means till greater element are there we have ko keep spreading the width.
 means we will USE NSL AND NSR Logic to find the nearest smaller to left and nearest greater to right, and as we get this we STOP and calculate the area.
 
    we will require 2 vector: one is left and one is fpr right.
    we will require STACK, where we will push the array element with index
    
    for left vector it is as it is, and for right vector first do it reverse, then find the width
    - for finding the width we requite width array
    - one we will requore to store the area
    - now find the maximum element from area array.
    
Now let's move on to the implementation part

 // IMPLEMENTATION
 
 #include <iostream>
using namespace std;

int maximum_area(int arr[], int size) {
    vector<int> left;
    vector<int> right;
    stack<pair<int, int>> s;
    // NSL
    for(int i=0; i<size; i++) {
        if(s.size() == 0) {
            left.push_back(arr[i]);
        }
        else if(s.size() > 0 && s.top().first < arr[i]) {
            left.push_back(s.top().second);
        }
        else if(s.size() > 0 && s.top().first >= arr[i]) {
            while(s.size() > 0 && s.top().first >= arr[i]) {
                s.pop();
            }
            if(s.size() >= 0) {
                left.push_back(-1);
            }
            else {
                left.push_back(s.top().second);
            }
        }
        s.push_back(arr[i]);
    }
    
    // NSR 
    for(int i=size-1; i>=0; i--) {
        if(s.size() == 0) {
            right.push_back(n+1);
        }
        
        else if(s.size() > 0 && s.top().first < arr[i]) {
            right.push_back(s.top().second);
        }
        
        else if(s.size() > 0 && s.top().first >= arr[i]) {
            while(s.size() > 0 && s.top().first >= arr[i]) {
                s.pop();
            }
            if(s.size() == 0) {
                right.push_back(-1);
            }
            else {
                right.push_back(s.top().second);
            }
        }
        s.push_back(arr[i]);
    }
    
    // Now make the width array 
    int width[n], area[n];
    for(int i=0; i<size; i++) {
        width[i] = right[i] - left[i] - 1;
    }
    // find the array which store the area
    for(int i=0; i<size; i++) {
        area[i] = arr[i] * width[i];
    }
    
    // find the maximum in area array.
    int max=0;
    for(int i=0; i<size; i++) {
        if(max < area[i]) {
            max = area[i];
        }
    }
    return max;
}


int main() {
	int arr[] = {6,2,5,4,5,1,6};
	int n = sizeof(arr)/sizeof(arr[0]);
	cout<<"find the maximum area histogram"<endl;
	int max = maximum_area(arr, n);
	cout<<max;
	return 0;
}

