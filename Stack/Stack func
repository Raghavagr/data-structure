// IMPLIMENTING ALL THE STACK OPERATIONS
// STACK --> LIFO

FULL CODE USING PEEK FUNCTION
// URL:	https://ide.geeksforgeeks.org/ZJStbPdiR0

// ALL FUNCTIONS IN STACK UNDER THIS URL:   https://ide.geeksforgeeks.org/RN6OHwzgiY


//code
#include <stdio.h>
#include <stdlib.h>

struct stack {
  int size;
  int top;
  int *arr;
};

int isEmpty(struct stack *ptr) {
    if(ptr->top == -1) {
        return 1;
    }
    else {
        return 0;
    }
}

int isFull(struct stack *ptr) {
    if(ptr->top == ptr->size - 1) {
        return 1;
    }
    else {
        return 0;
    }
}

int Push(struct stack *ptr, int item) {
    if(isFull(ptr)) {
        printf("\nStack Overflow!.. Cannot Insert");
    }
    else {
        ptr->top++;
        ptr->arr[ptr->top] = item;
    }
}

int Pop(struct stack *ptr) {
    if(isEmpty(ptr)) {
        printf("Underflow!.. Cannot POP from stack.");
    }
    else {
        int val = ptr->arr[ptr->top];
        ptr->top = ptr->top -1;
        return val;
    }
}

int stackTop(struct stack *ptr) {
    return ptr->arr[ptr->top];
}

int stackBottom(struct stack *ptr) {
    return ptr->arr[0];
}

int Peek(struct stack *ptr, int i) {
    int arrInd = ptr->top - i +1;
    if(arrInd < 0) {
        printf("\nNot a valid position for the stack\n");
        return -1;
    }
    else {
        return ptr->arr[arrInd];
    }
}

int main() {
	struct stack *sp = (struct stack *)malloc(sizeof(struct stack));
	// sp is nothing but an instance of structure which will store address, so we have to provide it a memory.
	// now in sp i can store
	sp->size = 10;
	sp->top = -1;
	sp->arr = (int *)malloc(sp->size * sizeof(int *));
	
	printf("before pushing isFull: %d\n", isFull(sp));
	printf("before pushing isEmpty: %d\n", isEmpty(sp));
	
	Push(sp, 7);
	Push(sp,24);
	Push(sp,56);
	Push(sp,17);
	Push(sp,39);
	Push(sp,42);
	Push(sp,51);
	Push(sp,77);
	Push(sp,99);
	Push(sp,73);
	Push(sp,66);
	
	printf("\nafter pushing isFull: %d\n", isFull(sp));
	printf("after pushing isEmpty: %d\n", isEmpty(sp));
	
	// POPING
	printf("Popped %d from the stack:\n", Pop(sp));
	
	// printing values from the stack 
	
	//Peeking-> to display all the stack elements
	for(int j=1; j<=sp->top +1; j++) {
	    printf("the value at position %d is %d\n",j,Peek(sp,j));
	}
	
	//printing the top element
	printf("\nThe top most value in stack is: %d\n", stackTop(sp));
	
	//printing the bottom element
	printf("The bottom most value in stack is: %d\n", stackBottom(sp));
	
	return 0;
}


// SAME CODE WITH LITLE BIT OF CHANGE IN POP FUNCTION

// URL:	https://ide.geeksforgeeks.org/0XNay0Fq21

